# Задача №49.
# Планеты вращаются вокруг звезд по эллиптическим орбитам.
# Назовем самой далекой планетой ту, орбита которой имеет
# самую большую площадь. Напишите функцию
# find_farthest_orbit(list_of_orbits), которая среди списка орбит
# планет найдет ту, по которой вращается самая далекая
# планета. Круговые орбиты не учитывайте: вы знаете, что у
# вашей звезды таких планет нет, зато искусственные спутники
# были были запущены на круговые орбиты. Результатом
# функции должен быть кортеж, содержащий длины полуосей
# эллипса орбиты самой далекой планеты. Каждая орбита
# представляет из себя кортеж из пары чисел - полуосей ее
# эллипса. Площадь эллипса вычисляется по формуле S = pi*a*b,
# где a и b - длины полуосей эллипса. При решении задачи
# используйте списочные выражения. Подсказка: проще всего
# будет найти эллипс в два шага: сначала вычислить самую
# большую площадь эллипса, а затем найти и сам эллипс,
# имеющий такую площадь. Гарантируется, что самая далекая
# планета ровно одна
# Ввод:
# orbits = [(1, 3), (2.5, 10), (7, 2), (6, 6), (4, 3)]
# print(*find_farthest_orbit(orbits))
# Вывод:
# 2.5 10


# def find_farthest_orbit(list_of_orbits):
#   max_sqr = 0
#   for i in list_of_orbits: # for a, b in orbits: ... Сразу распаковывваем кортеж
#     if i[0] != i[1]: # if a != b: Далее обращаемся без индексов к элементам кортежа
#       if max_sqr < i[0] * i[1]:
#         max_sqr = i[0] * i[1]
#         a, b = i[0], i[1]
#   return a, b

# orbits = [(1, 3), (2.5, 10), (7, 2), (6, 6), (4, 3)]
# print(*find_farthest_orbit(orbits))


# def find_farthest_orbit(orbits):
#   max_area = 0
#   i_orbit = 0
#   for i, (a, b) in enumerate(orbits):
#     if a != b and (area := a * b) > max_area:
#       max_area = area
#       i_orbit = i
#   return orbits[i_orbit]

# orbits = [(1, 3), (2.5, 10), (7, 2), (6, 6), (4, 3), (100, 100)]
# print(*find_farthest_orbit(orbits))


def find_farthest_orbit(orbits):
  return max(orbits, key=lambda x: (x[0] != x[1]) * x[0] * x[1])

orbits = [(1, 3), (2.5, 10), (7, 2), (6, 6), (4, 3), (100, 100)]
print(*find_farthest_orbit(orbits))
